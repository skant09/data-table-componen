{"version":3,"sources":["table/tableHeader.js","table/tableRow.js","table/tableBody.js","table/table.js","table/index.js","table/CheckboxComponent.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","columns","allSelected","style","background","border","position","top","length","map","column","key","id","label","TableRow","row","rowIndex","selectRows","onClick","columnIndex","textAlign","element","TableBody","props","rows","Table","setPreviousPage","setNextPage","clear","onScroll","e","ele","target","scrollTop","scrollHeight","offsetHeight","width","columnsConfig","type","checked","onChange","useState","checkedState","setcheckedState","value","Boolean","albumId","data","thumbnailUrl","title","DataTable","setData","currentPage","setCurrentPage","currentData","setCurrentData","isLoadingData","setIsLoadingData","setAllSelected","searchTerm","setSearchTerm","neighbour","numberOfEntryPerPage","totalNumberOfPages","Math","ceil","useEffect","a","startIndex","fetch","url","then","respone","json","_data","fetchData","max","endIndex","min","slice","selection","d","i","placeholder","height","fontSize","onSelectionChanged","console","log","numberOfEntry","App","className","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3284fcb6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n// import './table.css'\n\nconst TableHeader = ({columns, allSelected}) => {\n  return (\n    <thead style={{background: '#ccc', border: 'none', position: 'sticky', top: '0px'}}>\n      <tr>\n        {columns && columns.length && columns.map(column => {\n          return (<th key={column.id}>\n            { typeof column.label === 'string' ? column.label : null }\n            { typeof column.label === 'function' ? column.label({column, allSelected}) : null }\n          </th>)\n        })}\n      </tr>\n    </thead>\n  )\n}\n\nexport default TableHeader;\nTableHeader.propTypes = {\n  columns: PropTypes.arrayOf(Object),\n  allSelected: PropTypes.bool\n}","\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TableRow = ({row, rowIndex, columns, selectRows}) => {\n  return (\n  <tr onClick={selectRows({...row, rowIndex})}>\n    {columns.length && columns.map(\n      (column, columnIndex) => \n        (<td key={columnIndex} style={{textAlign: column.textAlign}} onClick={selectRows({...row, rowIndex})}>\n          {column.element(row)}\n        </td>)\n    )}\n  </tr>)\n}\n\nexport default TableRow;\nTableRow.propTypes = {\n  row: PropTypes.object,\n  rowIndex: PropTypes.number,\n  columns: PropTypes.arrayOf(Object),\n  selectRows: PropTypes.func\n}","import React from 'react';\nimport TableRow from './tableRow';\nimport PropTypes from 'prop-types';\n// import './table.css'\n\nconst TableBody = props => {\n  const { rows } = props;\n  return (\n    <tbody>\n      {rows && rows.length ? rows.map((row, rowIndex) => {\n        return (<TableRow key={rowIndex} rowIndex={rowIndex}  row={row} {...props} />)\n      }): null}\n    </tbody>\n  )\n}\n\nexport default TableBody;\nTableBody.propTypes = {\n  rows: PropTypes.arrayOf(Object)\n}","import React from 'react';\nimport TableHeader from './tableHeader';\nimport TableBody from './tableBody';\nimport PropTypes from 'prop-types';\n// import './table.css'\n\nconst Table = props => {\n  const {columns, setPreviousPage, setNextPage, allSelected} = props;\n  let scrollhandler = e => {\n    let ele = e.target;\n    if(ele.scrollTop + 50 >= (ele.scrollHeight - ele.offsetHeight)){\n      setNextPage()\n    };\n    if(ele.scrollHeight < 100){\n      setPreviousPage()\n    };\n  }\n  return (\n    <div style={{'maxHeight': '400px', 'overflow': 'scroll', 'margin': '0 auto', 'fontSize': '10px', clear: 'both'}} onScroll={scrollhandler} >\n      <table style={{width: '100%'}}>\n        <TableHeader columns={columns} allSelected={allSelected} />\n        <TableBody {...props} />\n      </table>\n    </div>\n  )\n}\n\nexport default Table;\nTable.propTypes = {\n  columns: PropTypes.arrayOf(Object),\n  setPreviousPage: PropTypes.func,\n  setNextPage: PropTypes.func,\n  allSelected: PropTypes.bool \n}","import React, {useEffect, useState} from 'react';\nimport Table from './table';\nimport CheckboxComponent from './CheckboxComponent';\n// import './table.css'\n\nexport const columnsConfig = [\n  {\n    id: \"number\",\n    label : props => (<input type=\"checkbox\" checked={props.allSelected} onChange={selectRows()}/>),\n    element : CheckboxComponent\n  },{\n    id: \"albumId\",\n    label : \"AlbumId\",\n    element : props => <span>{props.albumId}</span>,\n    width: \"100px\",\n    textAlign: 'right'\n  }, {\n    id: \"id\",\n    label : \"id\",\n    element : data => <span>{data.id}</span>,\n    width: \"100px\",\n    textAlign: 'right'\n  }, {\n    id: \"thumbnailUrl\",\n    label : \"thumbnailUrl\",\n    element : data => <span>{data.thumbnailUrl}</span>,\n    width: \"100px\",\n    textAlign: 'left'\n  },{\n    id: \"title\",\n    label : \"Title\",\n    element : data => <span>{data.title}</span>,\n    width: \"100px\",\n    textAlign: 'left'\n  }\n]\n\nlet selectRows;\n\nconst DataTable = (props) => {\n  let [data, setData] = useState([]);\n  let [currentPage, setCurrentPage] = useState(0);\n  let [currentData, setCurrentData] = useState([]);\n  let [isLoadingData, setIsLoadingData] = useState(false);\n  let [allSelected, setAllSelected] = useState(false);\n  let [searchTerm, setSearchTerm] = useState('');\n  let [neighbour] = useState(2);\n  const numberOfEntryPerPage = 100;\n  const totalNumberOfPages = Math.ceil(data.length/numberOfEntryPerPage);\n\n  useEffect(() => {\n    async function fetchData(){\n      // fetch Data\n      let startIndex = currentPage * numberOfEntryPerPage;\n      let url = \"https://jsonplaceholder.typicode.com/photos?\";\n      setIsLoadingData(true);\n      let _data = await fetch(url + '_start='+ startIndex + '&_limit=' + numberOfEntryPerPage +'&q='+searchTerm)\n                      .then(respone => respone.json());\n      setIsLoadingData(false);\n      setData([...data, ..._data]);\n    }\n    fetchData();\n  }, [currentPage, searchTerm]);\n\n  useEffect(()=>{\n    let startIndex = Math.max(currentPage - neighbour, 0) * numberOfEntryPerPage;\n    let endIndex = Math.min(currentPage + neighbour, totalNumberOfPages) * numberOfEntryPerPage;\n    let currentData = data.slice(startIndex, endIndex);\n    setCurrentData(currentData);\n  }, [data, currentPage, neighbour])\n\n  selectRows = selection => e => {\n    if(!selection) {\n      setAllSelected(!Boolean(allSelected));\n      data = data.map((d, i) => {\n        d.checked = !Boolean(allSelected);\n        return {...d}\n      })\n      return setData(data)  \n    } \n    data = data.map((d, i) => {\n      if(selection && selection.rowIndex === i) {\n        d.checked = !Boolean(selection.checked);\n      }\n      return {...d}\n    })\n    setData(data)\n  }\n\n  let setNextPage = () => {\n    let startIndex = currentPage * numberOfEntryPerPage;\n    if(startIndex > data.length) return;\n    setCurrentPage(currentPage++);\n  }\n  // let setPreviousPage = () => {\n  //   setCurrentPage(currentPage--);\n  // }\n  let fetchSearchTerm = e => {\n    setCurrentPage(0);\n    setData([]);\n    setSearchTerm(e.target.value);\n  }\n  return (\n    <>\n      <input type=\"text\" placeholder=\"Search any term...\" onChange={fetchSearchTerm} style={{width: '100%', height: '30px', fontSize: '24px'}}/>\n      <Table\n        allSelected={allSelected}\n        setNextPage={setNextPage}\n        selectRows={selectRows}\n        onSelectionChanged={e => console.log(e, 'selection Changed')}\n        rows={currentData}\n        columns={columnsConfig}\n        numberOfEntry={numberOfEntryPerPage}\n      />\n      {isLoadingData && <div>\n        <span style={{width: '100%', textAlign: \"center\", fontSize: '24px'}}>...Loading</span>\n      </div>}\n      {!isLoadingData && !data.length && <div>\n        <span style={{width: '100%', textAlign: \"center\", fontSize: '24px'}}>No data found</span>\n      </div>}\n    </>\n  )\n}\n\nexport default DataTable;","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nconst CheckboxComponent = props => {\n  if(!props){\n    props = {\n      checked: false\n    }\n  }\n  const [checkedState, setcheckedState] = useState(props.checked || false);\n  const toggelCheckboxState = e => {\n    setcheckedState(!checkedState);\n  }\n  return (\n    <input type=\"checkbox\" value={props.id} checked={Boolean(props.checked)} onChange={toggelCheckboxState} />\n  )\n}\nexport default CheckboxComponent\n\nCheckboxComponent.propTypes = {\n  id: PropTypes.number,\n  checked: PropTypes.bool,\n};","import React from 'react';\nimport Table from './table';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Datatable</header>\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}