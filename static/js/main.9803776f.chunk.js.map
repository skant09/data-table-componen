{"version":3,"sources":["table/tableHeader.js","table/tableRow.js","table/index.js","table/tableBody.js","table/table.js","table/CheckboxComponent.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","columns","style","background","border","length","map","column","key","id","label","selectRows","TableRow","datum","rowIndex","onRowClick","onClick","columnIndex","textAlign","element","TableBody","data","Table","rows","setPreviousPage","setNextPage","clear","onScroll","e","ele","target","scrollTop","scrollHeight","offsetHeight","width","columnsConfig","props","type","checked","useState","hoverState","setHoverState","value","Boolean","onChange","albumId","thumbnailUrl","title","DataTable","setData","currentPage","setCurrentPage","currentData","setCurrentData","neighbour","useEffect","a","fetch","then","respone","json","fetchData","totalNumberOfPages","Math","ceil","startIndex","max","endIndex","min","slice","selection","d","i","console","log","onSelectionChanged","numberOfEntry","App","className","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9803776f.chunk.js","sourcesContent":["import React from 'react';\n// import './table.css'\n\nconst TableHeader = ({columns}) => {\n  return (\n    <thead style={{background: '#ccc', border: 'none'}}>\n      <tr>\n        {columns && columns.length && columns.map(column => {\n          return (<th key={column.id}>\n            { typeof column.label === 'string' ? column.label : null }\n            { typeof column.label === 'function' ? column.label(column) : null }\n          </th>)\n        })}\n      </tr>\n    </thead>\n  )\n}\n\nexport default TableHeader;","\nimport React from 'react';\n\nconst TableRow = ({datum, rowIndex, onRowClick, columns, selectRows}) => {\n  return (\n  <tr onClick={onRowClick}>\n    {columns.length && columns.map(\n      (column, columnIndex) => (<td key={columnIndex} style={{textAlign: column.textAlign}} onClick={selectRows({...datum, rowIndex})}>{column.element(datum)}</td>)\n    )}\n  </tr>)\n}\n\nexport default TableRow;","import React, {useEffect, useState} from 'react';\nimport Table from './table';\nimport CheckboxComponent from './CheckboxComponent';\n// import './table.css'\n\nexport const columnsConfig = [\n  {\n    id: \"number\",\n    label : props => (<input type=\"checkbox\" checked={props.checked} onClick={selectRows()}/>),\n    element : CheckboxComponent\n  },{\n    id: \"albumId\",\n    label : \"AlbumId\",\n    element : props => <span>{props.albumId}</span>,\n    width: \"100px\",\n    textAlign: 'right'\n  }, {\n    id: \"id\",\n    label : \"id\",\n    element : data => <span>{data.id}</span>,\n    width: \"100px\",\n    textAlign: 'right'\n  }, {\n    id: \"thumbnailUrl\",\n    label : \"thumbnailUrl\",\n    element : data => <span>{data.thumbnailUrl}</span>,\n    width: \"100px\",\n    textAlign: 'left'\n  },{\n    id: \"title\",\n    label : \"Title\",\n    element : data => <span>{data.title}</span>,\n    width: \"100px\",\n    textAlign: 'left'\n  }\n]\n\nlet selectRows;\n\nconst DataTable = (props) => {\n  let [data, setData] = useState([]);\n  let [currentPage, setCurrentPage] = useState(1);\n  let [currentData, setCurrentData] = useState([]);\n  let [neighbour, setNeighbour] = useState(2);\n  let numberOfEntry = 100;\n  useEffect(() => {\n    async function fetchData(){\n      // fetch Data\n      let data = await fetch('https://jsonplaceholder.typicode.com/photos')\n                      .then(respone => respone.json());\n      setData(data);\n    }\n    fetchData();\n  }, []);\n\n  let totalNumberOfPages = Math.ceil(data.length/numberOfEntry);\n  useEffect(()=>{\n    let startIndex = Math.max(currentPage - neighbour, 0) * numberOfEntry;\n    let endIndex = Math.min(currentPage + neighbour, totalNumberOfPages) * numberOfEntry;\n    let currentData = data.slice(startIndex, endIndex);\n    setCurrentData(currentData);\n  }, [data, currentPage])\n\n  selectRows = selection => e => {\n    data = data.map((d, i) => {\n      if(selection && selection.rowIndex === i) {\n        d.checked = !Boolean(d.checked);\n      }\n      if(!selection){\n        d.checked = !Boolean(d.checked);\n      }\n      return d\n    })\n    setData(data)\n  }\n\n  let setNextPage = () => {\n    setCurrentPage(currentPage++);\n  }\n  let setPreviousPage = () => {\n    setCurrentPage(currentPage--);\n  }\n\n  return (\n    <Table\n      setNextPage={setNextPage}\n      selectRows={selectRows}\n      onRowClick={e => console.log(e)}\n      onSelectionChanged={e => console.log(e, 'selection Changed')}\n      rows={currentData}\n      columns={columnsConfig}\n      numberOfEntry={numberOfEntry}\n    />\n  )\n}\n\nexport default DataTable;","import React from 'react';\nimport TableRow from './tableRow'\n// import './table.css'\n\nconst TableBody = ({data, columns, onRowClick, selectRows}) => {\n  return (\n    <tbody>\n      {data.length ? data.map((datum, rowIndex) => {\n        return (<TableRow key={rowIndex} {...{datum, rowIndex, onRowClick, columns, selectRows}} />)\n      }): null}\n    </tbody>\n  )\n}\n\nexport default TableBody;","import React, {useEffect, useState} from 'react';\nimport TableHeader from './tableHeader';\nimport TableBody from './tableBody';\n// import './table.css'\n\nconst Table = ({columns, rows, onRowClick, selectRows, setPreviousPage, setNextPage}) => {\n  let scrollhandler = e => {\n    let ele = e.target;\n    if(ele.scrollTop + 50 >= (ele.scrollHeight - ele.offsetHeight)){\n      setNextPage()\n    };\n    if(ele.scrollHeight < 100){\n      setPreviousPage()\n    };\n  }\n\n  return (\n    <div style={{'maxHeight': '400px', 'overflow': 'scroll', 'margin': '0 auto', 'fontSize': '10px', clear: 'both'}} onScroll={scrollhandler} >\n      <table style={{width: '100%'}}>\n        <TableHeader columns={columns} />\n        <TableBody data={rows} columns={columns} onRowClick={onRowClick} selectRows={selectRows} />\n      </table>\n    </div>\n  )\n}\n\nexport default Table;","import React, {useState} from 'react';\n\n\nconst CheckboxComponent = props => {\n  const [hoverState, setHoverState] = useState(props.checked);\n  const toggelCheckboxState = e => {\n    setHoverState(!hoverState);\n  }\n  return (\n    <input type=\"checkbox\" value={props.id} checked={Boolean(props.checked)} onChange={toggelCheckboxState} />\n  )\n}\nexport default CheckboxComponent","import React from 'react';\nimport Table from './table';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Datatable</header>\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}